---
AWSTemplateFormatVersion: '2010-09-09'
Description: Keyclock ELB
Outputs:
  ELBSG:
    Value: {Ref: ELBSG}
  ELB:
    Value: {Ref: ELB}
Resources:
  ELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Keycloak ELB SG
      VpcId: {{ get_vpc_id(vpc_conn, vpc_name) }}
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 32702
          ToPort: 32702
          DestinationSecurityGroupId: {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeDefaultSG') }}
        - IpProtocol: tcp
          FromPort: 32703
          ToPort: 32703
          DestinationSecurityGroupId: {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeDefaultSG') }}

  HTTPComputeDefaultSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeDefaultSG') }}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: ELBSG}
      FromPort: 32702
      ToPort: 32702

  HTTPSComputeDefaultSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeDefaultSG') }}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: ELBSG}
      FromPort: 32703
      ToPort: 32703

  ELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      Subnets:
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeSubnet0') }}
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeSubnet1') }}
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeSubnet2') }}
      Policies:
        - PolicyName: EnableProxyProtocol
          PolicyType: ProxyProtocolPolicyType
          Attributes:
            - Name: ProxyProtocol
              Value: true
          InstancePorts:
            - 80
            - 443
      SecurityGroups:
        - {Ref : ELBSG}
      HealthCheck:
        Target: 'TCP:32703'
        HealthyThreshold: 2
        Interval: 10
        Timeout: 5
        UnhealthyThreshold: 2
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 10
      Listeners:
      - LoadBalancerPort: 80
        Protocol: TCP
        InstancePort: 32702
        InstanceProtocol: TCP
      - LoadBalancerPort: 443
        Protocol: TCP
        InstancePort: 32703
        InstanceProtocol: TCP
      Tags:
      - Key: Name
        Value: {{ env }}-keycloak
      - Key: Env
        Value: {{ env }}
      - Key: Service
        Value: keycloak


  ELBDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: {{ dns_zone_name }}.
      RecordSets:
        - Name: keycloak{% if env != 'prod' %}-{{ env }}{% endif %}.{{ dns_zone_name }}
          Type: A
          AliasTarget:
            HostedZoneId:
              'Fn::GetAtt':
                - ELB
                - CanonicalHostedZoneNameID
            DNSName:
              'Fn::GetAtt':
                - ELB
                - CanonicalHostedZoneName
