---
AWSTemplateFormatVersion: '2010-09-09'
Description: BRP stack in {{ env }} environment
Resources:
  BRPELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: BRP ELB SG
      VpcId: {{ get_vpc_id(vpc_conn, vpc_name) }}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        # HTTP
        - IpProtocol: tcp
          FromPort: 30010
          ToPort: 30010
          DestinationSecurityGroupId: {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeDefaultSG') }}
        # HTTPS
        - IpProtocol: tcp
          FromPort: 30011
          ToPort: 30011
          DestinationSecurityGroupId: {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeDefaultSG') }}

  HTTPToComputeDefaultSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeDefaultSG') }}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: BRPELBSG}
      FromPort: 30010
      ToPort: 30010

  HTTPSToComputeDefaultSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeDefaultSG') }}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: BRPELBSG}
      FromPort: 30011
      ToPort: 30011

  BRPELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      Subnets:
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeSubnet0') }}
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeSubnet1') }}
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeSubnet2') }}
      SecurityGroups:
        - {Ref : BRPELBSG}
      HealthCheck:
        Target: 'TCP:30011'
        HealthyThreshold: 2
        Interval: 10
        Timeout: 5
        UnhealthyThreshold: 2
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 30
      Listeners:
      - LoadBalancerPort: 80
        Protocol: HTTP
        InstancePort: 30010
        InstanceProtocol: HTTP
      - LoadBalancerPort: 443
        Protocol: HTTPS
        InstancePort: 30011
        InstanceProtocol: HTTP
        SSLCertificateId:
          'Fn::Join':
          - ''
          -
            - 'arn:aws:iam::'
            - Ref: AWS::AccountId
            - ':server-certificate/wildcard.notprod.homeoffice.gov.uk'
      AccessLoggingPolicy:
        EmitInterval: 5
        Enabled: true
        S3BucketName: {{ access_log_bucket_name }}
        S3BucketPrefix: {{ env }}/brp
      Tags:
      - Key: Name
        Value: {{ env }}-brp-elb
      - Key: Env
        Value: {{ env }}
      - Key: Service
        Value: brpapp

  BRPELBDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: {{ dns_zone_name }}.
      RecordSets:
        - Name: brp-{{ env }}.{{ dns_zone_name }}
          Type: A
{% if env == 'prod' %}
          SetIdentifier: brp-{{ env }}-Primary
          Failover: PRIMARY
{% endif %}
          AliasTarget:
{% if env == 'prod' %}
            EvaluateTargetHealth: true
{% endif %}
            HostedZoneId:
              'Fn::GetAtt':
                - BRPELB
                - CanonicalHostedZoneNameID
            DNSName:
              'Fn::GetAtt':
                - BRPELB
                - CanonicalHostedZoneName
{% if env == 'prod' %}
        - Name: brp-{{ env }}.{{ dns_zone_name }}
          Type: A
          SetIdentifier: brp-{{ env }}-Secondary
          Failover: SECONDARY
          AliasTarget:
            # CloudFront zone id
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: 'd3oehowpbcly38.cloudfront.net.'
            EvaluateTargetHealth: false
{% endif %}

