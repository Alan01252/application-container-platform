---
AWSTemplateFormatVersion: '2010-09-09'
Description: Kubernetes ELB stack in {{ env }} environment
Resources:
  ELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Kubernetes API ELB SG
      VpcId: {{ get_vpc_id(vpc_conn, vpc_name) }}
      SecurityGroupIngress:
{% for subnet in kube_access_subnets %}
        - IpProtocol: tcp
          CidrIp: {{ subnet }}
          FromPort: 443
          ToPort: 443
{%- endfor %}
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 6444
          ToPort: 6444
          DestinationSecurityGroupId: {{ get_stack_output(cf_conn, infra_stack_name, 'SecureDefaultSG') }}

  ELBSGToDefaultSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {{ get_stack_output(cf_conn, infra_stack_name, 'SecureDefaultSG') }}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: ELBSG}
      FromPort: 6444
      ToPort: 6444

  ELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      Subnets:
        - {{ get_stack_output(cf_conn, infra_stack_name, 'SecureSubnet0') }}
        - {{ get_stack_output(cf_conn, infra_stack_name, 'SecureSubnet1') }}
        - {{ get_stack_output(cf_conn, infra_stack_name, 'SecureSubnet2') }}
      SecurityGroups:
        - {Ref: ELBSG}
      HealthCheck:
        Target: 'TCP:6444'
        HealthyThreshold: 2
        Interval: 10
        Timeout: 5
        UnhealthyThreshold: 2
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 30
      Listeners:
      - LoadBalancerPort: 443
        Protocol: TCP
        InstancePort: 6443
        InstanceProtocol: TCP
      Tags:
      - Key: Name
        Value: {{ env }}-kubernetes-elb
      - Key: Env
        Value: {{ env }}
      - Key: Service
        Value: kubernetes

  ELBDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: {{ dns_zone_name }}.
      RecordSets:
        - Name: kube{% if env != 'prod' %}-{{ env }}{% endif %}.{{ dns_zone_name }}
          Type: A
          AliasTarget:
            HostedZoneId:
              'Fn::GetAtt':
                - ELB
                - CanonicalHostedZoneNameID
            DNSName:
              'Fn::GetAtt':
                - ELB
                - CanonicalHostedZoneName
