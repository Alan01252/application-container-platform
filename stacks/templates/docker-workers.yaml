---
AWSTemplateFormatVersion: '2010-09-09'
Description: CoreOS Docker Workers stack in {{ env }} environment
Resources:
  ELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Docker Workers ELB SG
      VpcId: {{ get_vpc_id(vpc_conn, vpc_name) }}
      SecurityGroupIngress:
      - IpProtocol: tcp
        SourceSecurityGroupId: {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeDefaultSG') }}
        FromPort: 2375
        ToPort: 2375
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 2375
        ToPort: 2375
        DestinationSecurityGroupId: {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeDefaultSG') }}

  ELBSGToDefaultSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeDefaultSG') }}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: ELBSG}
      FromPort: 2375
      ToPort: 2375

  ELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      Scheme: internal
      Subnets:
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeSubnet0') }}
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeSubnet1') }}
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeSubnet2') }}
      SecurityGroups:
        - {Ref: ELBSG}
      HealthCheck:
        Target: 'TCP:2375'
        HealthyThreshold: 2
        Interval: 30
        Timeout: 5
        UnhealthyThreshold: 2
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 30
      Listeners:
      - LoadBalancerPort: 2375
        Protocol: TCP
        InstancePort: 2375
        InstanceProtocol: TCP
      Tags:
      - Key: Name
        Value: {{ env }}-docker-workers-elb
      - Key: Env
        Value: {{ env }}
      - Key: Service
        Value: docker-workers

  ELBDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: {{ dns_zone_name }}.
      RecordSets:
        - Name: docker-workers{% if env != 'prod' %}-{{ env }}{% endif %}.{{ dns_zone_name }}
          Type: A
          AliasTarget:
            HostedZoneId:
              'Fn::GetAtt':
                - ELB
                - CanonicalHostedZoneNameID
            DNSName:
              'Fn::GetAtt':
                - ELB
                - DNSName
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: RootRole
      Path: /

  RootRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Principal:
            Service:
              - ec2.amazonaws.com
          Effect: Allow
          Action:
            - sts:AssumeRole
      Path: /

  ScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - Fn::Select:
            - '0'
            - Fn::GetAZs: ''
        - Fn::Select:
            - '1'
            - Fn::GetAZs: ''
        - Fn::Select:
            - '2'
            - Fn::GetAZs: ''
      LaunchConfigurationName: {Ref: LaunchConfig}
      LoadBalancerNames:
        - Ref: ELB
      VPCZoneIdentifier:
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeSubnet0') }}
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeSubnet1') }}
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeSubnet2') }}
      TerminationPolicies:
        - OldestInstance
        - OldestLaunchConfiguration
        - Default
      MaxSize: 1
      MinSize: 1
      Tags:
        - Key: Name
          Value: {{ env }}-docker-worker
          PropagateAtLaunch: true
        - Key: Env
          Value: {{ env }}
          PropagateAtLaunch: true
        - Key: Role
          Value: docker_workers
          PropagateAtLaunch: true

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      SpotPrice: 1.5000
      AssociatePublicIpAddress: true
      IamInstanceProfile: {Ref: InstanceProfile}
      ImageId: {{ get_ami_id(ec2_conn, coreos_ami_name) }}
      InstanceMonitoring: false
      InstanceType: c4.4xlarge
      KeyName: {{ ssh_key_name }}
      SecurityGroups:
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeDefaultSG') }}
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: "200"
            DeleteOnTermination: true
            VolumeType: "gp2"

      UserData:
        'Fn::Base64': |
          #cloud-config

          coreos:
            update:
              reboot-strategy: 'off'
            units:
            - name: update-ca-certificates.service
              command: start
              enable: true
              content: |
                [Unit]
                Description=Update CA Certificates
                Before=etcd2.service

                [Service]
                Type=oneshot
                RemainAfterExit=yes
                TimeoutStartSec=300
                ExecStart=/usr/sbin/update-ca-certificates
            - name: docker-tcp.socket
              command: start
              enable: true
              content: |
                [Unit]
                Description=Docker Socket for the API

                [Socket]
                ListenStream=2375
                Service=docker.service
                BindIPv6Only=both

                [Install]
                WantedBy=sockets.target
          write_files:
          - path: /etc/aws-environment
            content: |
              ENVIRONMENT={{ env }}
              AWS_REGION={{ region }}
          - path: /etc/ssl/certs/platform_ca.pem
            encoding: base64
            content: {{ ca_cert }}
