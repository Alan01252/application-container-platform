---
AWSTemplateFormatVersion: '2010-09-09'
Description: OpenVPN Access Service ELB
Outputs:
  ELBSG:
    Value: {Ref: ELBSG}
  ELB:
    Value: {Ref: ELB}
Resources:
  ELBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: OpenVPN Authd ELB SG
      VpcId: {{ get_vpc_id(vpc_conn, vpc_name) }}
      SecurityGroupIngress:
{% for subnet in kube_access_subnets %}
        - IpProtocol: tcp
          CidrIp: {{ subnet }}
          FromPort: 80
          ToPort: 80
        - IpProtocol: tcp
          CidrIp: {{ subnet }}
          FromPort: 443
          ToPort: 443
{%- endfor %}
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 32721
          ToPort: 32721
          DestinationSecurityGroupId: {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeDefaultSG') }}
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 32722
          ToPort: 32722
          DestinationSecurityGroupId: {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeDefaultSG') }}

  HTTPDefaultSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeDefaultSG') }}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: ELBSG}
      FromPort: 32721
      ToPort: 32721

  HTTPSDefaultSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeDefaultSG') }}
      IpProtocol: tcp
      SourceSecurityGroupId: {Ref: ELBSG}
      FromPort: 32722
      ToPort: 32722

  ELB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      CrossZone: true
      Subnets:
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeSubnet0') }}
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeSubnet1') }}
        - {{ get_stack_output(cf_conn, infra_stack_name, 'ComputeSubnet2') }}
      SecurityGroups:
        - {Ref : ELBSG}
      HealthCheck:
        Target: 'TCP:32722'
        HealthyThreshold: 2
        Interval: 10
        Timeout: 5
        UnhealthyThreshold: 2
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 10
      Listeners:
      - LoadBalancerPort: 80
        Protocol: TCP
        InstancePort: 32721
        InstanceProtocol: TCP
      - LoadBalancerPort: 443
        Protocol: TCP
        InstancePort: 32722
        InstanceProtocol: TCP
      Tags:
      - Key: Name
        Value: {{ env }}-openvpn-authd
      - Key: Env
        Value: {{ env }}
      - Key: Service
        Value: openvpn-authd

  ELBDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: {{ dns_zone_name }}.
      RecordSets:
        - Name: kubeaccess{% if env != 'prod' %}-{{ env }}{% endif %}.{{ dns_zone_name }}
          Type: A
          AliasTarget:
            HostedZoneId:
              'Fn::GetAtt':
                - ELB
                - CanonicalHostedZoneNameID
            DNSName:
              'Fn::GetAtt':
                - ELB
                - CanonicalHostedZoneName
